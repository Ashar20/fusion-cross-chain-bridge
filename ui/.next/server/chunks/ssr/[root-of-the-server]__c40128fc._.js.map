{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,8OAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mcACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,8OAAC,iKAAA,CAAA,OAAmB;QAClB,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,uNACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,KAAK,EACZ,SAAS,EACT,GAAG,OAC6C;IAChD,qBACE,8OAAC,gKAAA,CAAA,OAAkB;QACjB,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,uBAAuB;QACpC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OAC6C;IAChD,qBACE,8OAAC,gKAAA,CAAA,OAAkB;QACjB,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,uGACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,gKAAA,CAAA,UAAqB;QACpB,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mqBACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,gKAAA,CAAA,UAAqB;QACpB,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,uBAAuB;QACpC,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,kZACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,UAAU,KAAK,EACf,GAAG,OAEuD;IAC1D,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,qOACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,GAAG,OAC8D;IACjE,qBACE,8OAAC;QACC,aAAU;QACV,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,iBAAiB,EACxB,SAAS,EACT,GAAG,OACyB;IAC5B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kGACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/lib/blockchain.ts"],"sourcesContent":["import { ethers } from 'ethers';\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\n// Official 1inch Fusion+ contracts (Ethereum mainnet)\nconst OFFICIAL_1INCH_CONTRACTS = {\n  // Official 1inch Limit Order Protocol V4 (mainnet)\n  LOP_V4: '0x111111125421ca6dc452d289314280a0f8842a65',\n  // Official 1inch Settlement Extension\n  SETTLEMENT_EXTENSION: '0x119c71D3BbAC22029622cbaEc24854d3D32D2828',\n  // Official 1inch Router V6\n  ROUTER_V6: '0x111111125434b319222cdbf8c261674adb56f3ae',\n  // Common tokens\n  WETH: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  USDC: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  DAI: '0x6B175474E89094C44Da98b954EedeAC495271d0F'\n};\n\n// Custom contracts for testnet\nconst CUSTOM_CONTRACTS = {\n  escrowFactory: '0x084cE671a59bAeAfc10F21467B03dE0F4204E10C',\n  gaslessResolver: '0x5574FE78CF4B787BF5FBD6f333C444f69baFAAA8', // Updated to new address\n  eosEscrowAccount: 'silaslist123'\n};\n\nexport class BlockchainIntegration {\n  private provider: ethers.BrowserProvider | null = null;\n  private signer: ethers.JsonRpcSigner | null = null;\n  private gaslessResolver: ethers.Contract | null = null;\n  private isMainnet: boolean = false;\n\n  constructor() {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      this.provider = new ethers.BrowserProvider(window.ethereum);\n    }\n  }\n\n  async connect() {\n    try {\n      if (!this.provider) {\n        throw new Error('No ethereum provider found');\n      }\n\n      await window.ethereum?.request({ method: 'eth_requestAccounts' });\n      this.signer = await this.provider.getSigner();\n      \n      // Check if we're on mainnet\n      const network = await this.provider.getNetwork();\n      this.isMainnet = network.chainId === BigInt(1);\n\n      if (this.isMainnet) {\n        console.log('🏭 Connected to Ethereum mainnet - using official 1inch Fusion+ contracts');\n        return {\n          success: true,\n          mode: 'mainnet',\n          network: network.name,\n          chainId: Number(network.chainId),\n          message: 'Connected to official 1inch Fusion+ on mainnet.'\n        };\n      } else {\n        console.log('🧪 Connected to testnet - using custom 1inch-compatible contracts');\n        return {\n          success: true,\n          mode: 'testnet',\n          network: network.name,\n          chainId: Number(network.chainId),\n          message: 'Using custom 1inch-compatible contracts for testnet development.'\n        };\n      }\n    } catch (error) {\n      console.error('Failed to connect:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  async createRealIntent(swapParams: any) {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      if (this.isMainnet) {\n        // Use official 1inch Fusion+ contracts on mainnet\n        console.log('🏭 Creating gasless intent using official 1inch Fusion+ contracts');\n        \n        // For now, simulate the intent creation since we need to integrate with the actual Fusion SDK\n        const swapId = ethers.keccak256(ethers.randomBytes(32));\n        \n        // Simulate official 1inch Fusion+ intent creation\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        return {\n          swapId,\n          mode: 'mainnet',\n          message: 'Gasless intent created using official 1inch Fusion+ contracts'\n        };\n      } else {\n        // Use actual deployed contract for creating intent\n        if (!this.gaslessResolver) {\n          const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a'; // New fundable contract\n          console.log('🔧 Creating gasless resolver contract with address:', resolverAddress);\n          const abi = [\n            \"function createIntent(bytes32 swapId, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, bytes calldata signature) external\",\n            \"function executeIntent(bytes32 swapId) external payable\",\n            \"function claimTokens(bytes32 swapId, bytes32 secret, bytes calldata claimSignature) external\",\n            \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\",\n            \"function userNonces(address user) external view returns (uint256)\"\n          ];\n          this.gaslessResolver = new ethers.Contract(resolverAddress, abi, this.signer);\n        }\n        \n        console.log('🎯 Using resolver address:', this.gaslessResolver.target);\n        \n        const swapId = ethers.keccak256(ethers.randomBytes(32));\n        const beneficiary = await this.signer.getAddress();\n        const amount = ethers.parseEther(swapParams.ethAmount || '0.001');\n        const orderHash = ethers.keccak256(ethers.randomBytes(32));\n        \n        // Generate a proper secret and hashlock pair\n        const secret = ethers.randomBytes(32);\n        const hashlock = ethers.keccak256(secret);\n        \n        // Store the secret for later use in claiming\n        const secretHex = ethers.hexlify(secret);\n        localStorage.setItem(`secret_${swapId}`, secretHex);\n        console.log('🔐 Stored secret for swap:', swapId, 'Secret:', secretHex);\n        \n        const deadline = Math.floor(Date.now() / 1000) + 3600;\n        \n        console.log('💰 Creating intent with amount:', {\n          inputAmount: swapParams.ethAmount,\n          parsedAmount: ethers.formatEther(amount),\n          amountWei: amount.toString()\n        });\n        \n        // Get the current nonce from the contract\n        let currentNonce;\n        try {\n          currentNonce = await this.gaslessResolver.userNonces(beneficiary);\n          console.log('🔢 Current nonce for beneficiary:', currentNonce.toString());\n        } catch (error: any) {\n          console.log('⚠️ Could not get nonce from contract, using 0:', error.message);\n          currentNonce = BigInt(0); // Use 0 as fallback\n        }\n        \n        // Debug: Check if userNonces function exists\n        console.log('🔍 Contract functions:', Object.keys(this.gaslessResolver.interface.fragments));\n        console.log('🔍 userNonces function exists:', typeof this.gaslessResolver.userNonces);\n        \n        // Create signature for the intent\n        const domain = {\n          name: 'Gasless1inchResolver',\n          version: '1.0.0',\n          chainId: 11155111, // Sepolia\n          verifyingContract: this.gaslessResolver.target.toString()\n        };\n        \n        const types = {\n          Intent: [\n            { name: 'swapId', type: 'bytes32' },\n            { name: 'user', type: 'address' },\n            { name: 'beneficiary', type: 'address' },\n            { name: 'amount', type: 'uint256' },\n            { name: 'orderHash', type: 'bytes32' },\n            { name: 'hashlock', type: 'bytes32' },\n            { name: 'deadline', type: 'uint256' },\n            { name: 'nonce', type: 'uint256' }\n          ]\n        };\n        \n        const message = {\n          swapId: swapId,\n          user: beneficiary,\n          beneficiary: beneficiary,\n          amount: amount,\n          orderHash: orderHash,\n          hashlock: hashlock,\n          deadline: deadline,\n          nonce: currentNonce // Use actual nonce from contract\n        };\n        \n        const signature = await this.signer.signTypedData(domain, types, message);\n        \n        console.log('💸 Creating real gasless intent - Resolver will pay for execution gas');\n        const tx = await this.gaslessResolver.createIntent(\n          swapId, \n          beneficiary, \n          amount, \n          orderHash, \n          hashlock, \n          deadline, \n          signature\n        );\n        const receipt = await tx.wait();\n        \n        return {\n          swapId,\n          mode: 'testnet',\n          message: 'Gasless intent created using deployed gasless resolver',\n          txHash: receipt.hash\n        };\n      }\n    } catch (error) {\n      console.error('Failed to create intent:', error);\n      throw error;\n    }\n  }\n\n  async executeRealIntent(swapId: string, amount: string) {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      if (this.isMainnet) {\n        // Use official 1inch Fusion+ execution on mainnet\n        console.log('🏭 Executing intent using official 1inch Fusion+ contracts');\n        \n        // Simulate official 1inch Fusion+ execution\n        await new Promise(resolve => setTimeout(resolve, 3000));\n        \n        return {\n          mode: 'mainnet',\n          message: 'Intent executed using official 1inch Fusion+ contracts (Gasless)'\n        };\n      } else {\n        // Use actual deployed contract for executing intent\n        const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a'; // New fundable contract\n        console.log('🔧 Creating gasless resolver contract for execution with address:', resolverAddress);\n        \n        // Use consistent ABI for all operations\n        const abi = [\n          \"function createIntent(bytes32 swapId, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, bytes calldata signature) external\",\n          \"function executeIntent(bytes32 swapId) external payable\",\n          \"function claimTokens(bytes32 swapId, bytes32 secret, bytes calldata claimSignature) external\",\n          \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\",\n          \"function userNonces(address user) external view returns (uint256)\"\n        ];\n        \n        // Create fresh contract instance\n        this.gaslessResolver = new ethers.Contract(resolverAddress, abi, this.signer);\n        \n        console.log('🎯 Using resolver address for execution:', this.gaslessResolver.target);\n        \n        // Get intent details to verify the amount\n        const intentDetails = await this.getIntentDetails(swapId);\n        console.log('📋 Intent details:', intentDetails);\n        \n        // Verify the amount matches - convert both to Wei for comparison\n        const expectedAmountWei = intentDetails.amount;\n        const providedAmountWei = ethers.parseEther(amount);\n        \n        console.log('💰 Amount verification:', {\n          expectedAmountEth: intentDetails.amountEth,\n          providedAmountEth: amount,\n          expectedAmountWei: expectedAmountWei.toString(),\n          providedAmountWei: providedAmountWei.toString(),\n          match: expectedAmountWei === providedAmountWei\n        });\n        \n        if (expectedAmountWei !== providedAmountWei) {\n          throw new Error(`Amount mismatch: Expected ${intentDetails.amountEth} ETH, but provided ${amount} ETH. Please use the stored intent amount or update the intent.`);\n        }\n        \n        // REAL EXECUTION: User sends ETH for swap, resolver pays gas\n        console.log('💸 User sends ETH amount for swap, resolver pays gas fees');\n        console.log('💰 Executing intent with amount:', {\n          inputAmount: amount,\n          parsedAmount: ethers.formatEther(ethers.parseEther(amount)),\n          amountWei: ethers.parseEther(amount).toString()\n        });\n        \n        // Debug the contract call\n        console.log('🔧 Contract details:', {\n          address: this.gaslessResolver.target,\n          hasExecuteIntent: typeof this.gaslessResolver.executeIntent === 'function',\n          executeIntentType: typeof this.gaslessResolver.executeIntent\n        });\n        \n        const tx = await this.gaslessResolver.executeIntent(swapId, { \n          value: ethers.parseEther(amount) // User sends ETH for swap, but resolver pays gas\n        });\n        console.log('📝 Transaction sent:', tx.hash);\n        \n        const receipt = await tx.wait();\n        console.log('✅ Transaction confirmed:', receipt.hash);\n        \n        return {\n          mode: 'testnet',\n          message: 'Intent executed using deployed gasless resolver (Resolver paid gas, user sent ETH for swap)',\n          txHash: receipt.hash\n        };\n      }\n    } catch (error) {\n      console.error('Failed to execute intent:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 🚀 Manual Intent Execution (for when relayer is not running)\n   * This allows users to manually execute their own intents\n   */\n  async manualExecuteIntent(swapId: string) {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      console.log('🚀 Manual intent execution initiated');\n      \n      // Get intent details first\n      const intentDetails = await this.getIntentDetails(swapId);\n      \n      if (intentDetails.executed) {\n        return {\n          success: true,\n          message: 'Intent already executed',\n          escrowAddress: intentDetails.escrowAddress\n        };\n      }\n      \n      // Execute the intent with the correct amount\n      const result = await this.executeRealIntent(swapId, intentDetails.amountEth);\n      \n      return {\n        success: true,\n        message: 'Intent manually executed successfully',\n        txHash: result.txHash,\n        escrowAddress: intentDetails.escrowAddress\n      };\n      \n    } catch (error) {\n      console.error('Failed to manually execute intent:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  async getRealIntentStatus(swapId: string) {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      if (this.isMainnet) {\n        // Simulate status check for mainnet\n        return {\n          executed: true,\n          claimed: false,\n          mode: 'mainnet',\n          status: 'Executed',\n          txHash: '0x123...'\n        };\n      } else {\n        // Use actual deployed contract for getting status\n        if (!this.gaslessResolver) {\n          const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a'; // New fundable contract\n          console.log('🔧 Creating gasless resolver contract for status check with address:', resolverAddress);\n          const abi = [\n            \"function createIntent(bytes32 swapId, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, bytes calldata signature) external\",\n            \"function executeIntent(bytes32 swapId) external payable\",\n            \"function claimTokens(bytes32 swapId, bytes32 secret, bytes calldata claimSignature) external\",\n            \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\",\n            \"function userNonces(address user) external view returns (uint256)\"\n          ];\n          this.gaslessResolver = new ethers.Contract(resolverAddress, abi, this.signer);\n        }\n        \n        console.log('🎯 Using resolver address for status check:', this.gaslessResolver.target);\n        \n        // REAL STATUS CHECK: Query actual contract\n        const intent = await this.gaslessResolver.getIntent(swapId);\n        \n        return {\n          executed: intent.executed,\n          claimed: intent.claimed,\n          mode: 'testnet',\n          status: intent.executed ? (intent.claimed ? 'Claimed' : 'Executed') : 'Pending',\n          txHash: intent.escrowAddress || ''\n        };\n      }\n    } catch (error) {\n      console.error('Failed to get intent status:', error);\n      throw error;\n    }\n  }\n\n  async claimTokens(swapId: string, secret: string) {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      if (this.isMainnet) {\n        // Simulate claim for mainnet\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return {\n          mode: 'mainnet',\n          message: 'Tokens claimed using official 1inch Fusion+ contracts',\n          txHash: '0x123...'\n        };\n      } else {\n        // Use actual deployed contract for claiming\n        if (!this.gaslessResolver) {\n          const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a'; // New fundable contract\n          console.log('🔧 Creating gasless resolver contract for claiming with address:', resolverAddress);\n          const abi = [\n            \"function createIntent(bytes32 swapId, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, bytes calldata signature) external\",\n            \"function executeIntent(bytes32 swapId) external payable\",\n            \"function claimTokens(bytes32 swapId, bytes32 secret, bytes calldata claimSignature) external\",\n            \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\",\n            \"function userNonces(address user) external view returns (uint256)\"\n          ];\n          this.gaslessResolver = new ethers.Contract(resolverAddress, abi, this.signer);\n        }\n        \n        console.log('🎯 Using resolver address for claiming:', this.gaslessResolver.target);\n        \n        // Get the stored secret for this swap\n        const storedSecretHex = localStorage.getItem(`secret_${swapId}`);\n        if (!storedSecretHex) {\n          throw new Error('No secret found for this swap. Please check if the intent was created properly.');\n        }\n        \n        // Convert hex secret back to bytes32 (this is the actual secret)\n        const secretBytes = ethers.getBytes(storedSecretHex);\n        \n        console.log('🔐 Using stored secret for claiming:', {\n          swapId,\n          storedSecretHex,\n          secretBytes: ethers.hexlify(secretBytes)\n        });\n        \n        // Create claim signature with proper EIP-712 structure\n        const domain = {\n          name: 'Gasless1inchResolver',\n          version: '1.0.0',\n          chainId: 11155111, // Sepolia\n          verifyingContract: this.gaslessResolver.target.toString()\n        };\n        \n        const types = {\n          Claim: [\n            { name: 'swapId', type: 'bytes32' },\n            { name: 'secret', type: 'bytes32' }\n          ]\n        };\n        \n        const message = {\n          swapId: swapId,\n          secret: ethers.hexlify(secretBytes)\n        };\n        \n        const claimSignature = await this.signer.signTypedData(domain, types, message);\n        \n        console.log('🎯 Claiming tokens with stored secret');\n        const tx = await this.gaslessResolver.claimTokens(\n          swapId,\n          ethers.hexlify(secretBytes), // Pass the actual secret bytes\n          claimSignature\n        );\n        const receipt = await tx.wait();\n        \n        return {\n          mode: 'testnet',\n          message: 'Tokens claimed successfully using deployed gasless resolver',\n          txHash: receipt.hash\n        };\n      }\n    } catch (error) {\n      console.error('Failed to claim tokens:', error);\n      throw error;\n    }\n  }\n\n  async refundHTLC(swapId: string) {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      if (this.isMainnet) {\n        // Simulate refund for mainnet\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return {\n          mode: 'mainnet',\n          message: 'HTLC refunded using official 1inch Fusion+ contracts',\n          txHash: '0x123...'\n        };\n      } else {\n        // Use actual deployed contract for refunding\n        if (!this.gaslessResolver) {\n          const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a'; // New fundable contract\n          console.log('🔧 Creating gasless resolver contract for refunding with address:', resolverAddress);\n          const abi = [\n            \"function createIntent(bytes32 swapId, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, bytes calldata signature) external\",\n            \"function executeIntent(bytes32 swapId) external payable\",\n            \"function claimTokens(bytes32 swapId, bytes32 secret, bytes calldata claimSignature) external\",\n            \"function refundExpiredIntent(bytes32 swapId) external\",\n            \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\",\n            \"function userNonces(address user) external view returns (uint256)\"\n          ];\n          this.gaslessResolver = new ethers.Contract(resolverAddress, abi, this.signer);\n        }\n        \n        console.log('🎯 Using resolver address for refunding:', this.gaslessResolver.target);\n        \n        console.log('🔄 Refunding expired HTLC');\n        const tx = await this.gaslessResolver.refundExpiredIntent(swapId);\n        const receipt = await tx.wait();\n        \n        return {\n          mode: 'testnet',\n          message: 'HTLC refunded successfully using deployed gasless resolver',\n          txHash: receipt.hash\n        };\n      }\n    } catch (error) {\n      console.error('Failed to refund HTLC:', error);\n      throw error;\n    }\n  }\n\n  async getResolverBalance() {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a'; // New fundable contract\n      \n      const balance = await provider.getBalance(resolverAddress);\n      const balanceEth = ethers.formatEther(balance);\n      \n      return {\n        address: resolverAddress,\n        balance: balanceEth,\n        balanceWei: balance.toString(),\n        isFunded: balance > BigInt(0)\n      };\n    } catch (error) {\n      console.error('Failed to get resolver balance:', error);\n      throw error;\n    }\n  }\n\n  async performEOSTransfer(amount: string) {\n    // Simulated EOS transfer for UI demonstration\n    console.log(`🌴 Simulating EOS transfer of ${amount} EOS`);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      success: true,\n      txHash: 'simulated_eos_transfer_' + Date.now(),\n      message: 'EOS transfer simulated successfully'\n    };\n  }\n\n  async getIntentDetails(swapId: string) {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      if (!this.gaslessResolver) {\n        const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a';\n        const abi = [\n          \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\",\n          \"function userNonces(address user) external view returns (uint256)\"\n        ];\n        this.gaslessResolver = new ethers.Contract(resolverAddress, abi, this.signer);\n      }\n      \n      const intent = await this.gaslessResolver.getIntent(swapId);\n      return {\n        user: intent.user,\n        beneficiary: intent.beneficiary,\n        amount: intent.amount,\n        amountEth: ethers.formatEther(intent.amount),\n        orderHash: intent.orderHash,\n        hashlock: intent.hashlock,\n        deadline: intent.deadline,\n        nonce: intent.nonce,\n        executed: intent.executed,\n        claimed: intent.claimed,\n        escrowAddress: intent.escrowAddress\n      };\n    } catch (error) {\n      console.error('Failed to get intent details:', error);\n      throw error;\n    }\n  }\n\n  async testContractConnection() {\n    if (!this.signer) throw new Error('Not connected');\n\n    try {\n      const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a';\n      console.log('🧪 Testing contract connection...');\n      \n      const abi = [\n        \"function userNonces(address user) external view returns (uint256)\"\n      ];\n      \n      const resolver = new ethers.Contract(resolverAddress, abi, this.signer);\n      const testAddress = await this.signer.getAddress();\n      const nonce = await resolver.userNonces(testAddress);\n      \n      console.log('✅ Contract connection test successful:', {\n        address: resolverAddress,\n        testAddress,\n        nonce: nonce.toString()\n      });\n      \n      return {\n        success: true,\n        address: resolverAddress,\n        nonce: nonce.toString()\n      };\n    } catch (error) {\n      console.error('❌ Contract connection test failed:', error);\n      throw error;\n    }\n  }\n\n  getContracts() {\n    if (this.isMainnet) {\n      return {\n        ...OFFICIAL_1INCH_CONTRACTS,\n        mode: 'mainnet',\n        message: 'Using official 1inch Fusion+ contracts'\n      };\n    } else {\n      return {\n        ...CUSTOM_CONTRACTS,\n        mode: 'testnet',\n        message: 'Using custom 1inch-compatible contracts'\n      };\n    }\n  }\n}\n\nexport const blockchain = new BlockchainIntegration();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1054, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/lib/eos-wallet.ts"],"sourcesContent":["import { ethers } from 'ethers';\n\nexport interface EOSWalletConfig {\n  accountName: string;\n  privateKey: string;\n  rpcUrl?: string;\n  network?: 'mainnet' | 'testnet';\n}\n\nexport class EOSWalletIntegration {\n  private config: EOSWalletConfig | null = null;\n  private isConnected: boolean = false;\n\n  constructor() {}\n\n  async connect(config: EOSWalletConfig): Promise<boolean> {\n    try {\n      // Validate the config\n      if (!config.accountName || !config.privateKey) {\n        throw new Error('Account name and private key are required');\n      }\n\n      // Basic validation for EOS account name format\n      if (!/^[a-z1-5]{1,12}$/.test(config.accountName)) {\n        throw new Error('Invalid EOS account name format');\n      }\n\n      // Basic validation for private key format (WIF format)\n      if (!/^5[HJK][1-9A-HJ-NP-Za-km-z]{49}$/.test(config.privateKey)) {\n        throw new Error('Invalid EOS private key format (WIF)');\n      }\n\n      // Set default RPC URL based on network\n      const network = config.network || 'testnet';\n      const defaultRpcUrl = network === 'mainnet' \n        ? 'https://eos.greymass.com'  // EOS mainnet RPC\n        : 'https://jungle4.cryptolions.io'; // Jungle testnet RPC\n\n      this.config = {\n        ...config,\n        network,\n        rpcUrl: config.rpcUrl || defaultRpcUrl\n      };\n\n      this.isConnected = true;\n      console.log(`🌴 Connected to EOS ${network}: ${config.accountName}`);\n      return true;\n    } catch (error) {\n      console.error('EOS wallet connection failed:', error);\n      return false;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.isConnected = false;\n    this.config = null;\n  }\n\n  async getAccountInfo(): Promise<any> {\n    if (!this.isConnected || !this.config) {\n      throw new Error('EOS wallet not connected');\n    }\n\n    try {\n      // Simulate fetching account info from EOS RPC\n      const response = await fetch(`${this.config.rpcUrl}/v1/chain/get_account`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ account_name: this.config.accountName })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch account info: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get account info:', error);\n      // Return simulated data for demo purposes\n      return {\n        account_name: this.config.accountName,\n        core_liquid_balance: this.config.network === 'mainnet' ? '100.0000 EOS' : '1000.0000 EOS',\n        cpu_limit: { available: '1000', used: '0', max: '1000' },\n        net_limit: { available: '1000', used: '0', max: '1000' },\n        ram_usage: 1000\n      };\n    }\n  }\n\n  async getBalance(): Promise<string> {\n    try {\n      const accountInfo = await this.getAccountInfo();\n      return accountInfo.core_liquid_balance || '0.0000 EOS';\n    } catch (error) {\n      console.error('Failed to get balance:', error);\n      return '0.0000 EOS';\n    }\n  }\n\n  async transferEOS(toAccount: string, amount: string, memo: string = ''): Promise<any> {\n    if (!this.isConnected || !this.config) {\n      throw new Error('EOS wallet not connected');\n    }\n\n    try {\n      console.log(`🌴 Simulating EOS transfer: ${amount} EOS to ${toAccount}`);\n      console.log(`📝 Memo: ${memo}`);\n      console.log(`🌐 Network: ${this.config.network}`);\n      \n      // Simulate transfer delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      return {\n        success: true,\n        txHash: `eos_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        from: this.config.accountName,\n        to: toAccount,\n        amount,\n        memo,\n        network: this.config.network\n      };\n    } catch (error) {\n      console.error('EOS transfer failed:', error);\n      throw error;\n    }\n  }\n\n  isWalletConnected(): boolean {\n    return this.isConnected;\n  }\n\n  getAccountName(): string | null {\n    return this.config?.accountName || null;\n  }\n\n  getNetwork(): string | null {\n    return this.config?.network || null;\n  }\n\n  getRpcUrl(): string | null {\n    return this.config?.rpcUrl || null;\n  }\n}\n\nexport const eosWallet = new EOSWalletIntegration(); "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":["file:///Users/siiii/ome1nch/fusion-cross-chain-bridge/ui/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { BlockchainIntegration } from '@/lib/blockchain';\nimport { EOSWalletIntegration, EOSWalletConfig } from '@/lib/eos-wallet';\nimport { ethers } from 'ethers';\n\nexport default function GaslessSwapInterface() {\n  // Swap state\n  const [swapDirection, setSwapDirection] = useState<'eth-to-eos' | 'eos-to-eth'>('eth-to-eos');\n  const [ethAmount, setEthAmount] = useState('0.01');\n  const [eosAmount, setEosAmount] = useState('35.0');\n  const [swapStatus, setSwapStatus] = useState<string>('');\n  const [swapId, setSwapId] = useState<string>('');\n  const [hashlock, setHashlock] = useState<string>('');\n  const [deadline, setDeadline] = useState<string>('');\n  const [txHash, setTxHash] = useState<string>('');\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<string>('');\n\n  // Conversion rate (for demo purposes - in real app this would come from price feeds)\n  const [conversionRate, setConversionRate] = useState(3500); // New state for conversion\n  const [ethTxHash, setEthTxHash] = useState<string>('');\n  const [eosTxHash, setEosTxHash] = useState<string>('');\n  const [gasPrice, setGasPrice] = useState<string>('~15 Gwei');\n  const [gasLimit, setGasLimit] = useState<string>('~200,000');\n  const [estimatedGasCost, setEstimatedGasCost] = useState<string>('');\n  const [secret, setSecret] = useState<string>('');\n  const [revealedSecret, setRevealedSecret] = useState<string>('');\n  const [showSecretForm, setShowSecretForm] = useState(false);\n  \n  // HTLC State Management\n  const [htlcData, setHtlcData] = useState<{\n    hashlock: string;\n    timelock: number;\n    orderHash: string;\n    beneficiary: string;\n    amount: string;\n    deadline: number;\n    escrowAddress: string;\n    executed: boolean;\n    claimed: boolean;\n    refunded: boolean;\n  } | null>(null);\n\n  // Resolver Balance State\n  const [resolverBalance, setResolverBalance] = useState<{\n    address: string;\n    balance: string;\n    balanceWei: string;\n    isFunded: boolean;\n  } | null>(null);\n\n  // Store the exact amount used when creating intent\n  const [intentAmount, setIntentAmount] = useState<string>('');\n\n  // Calculate equivalent amounts\n  const calculateEquivalent = (amount: string, fromCurrency: 'eth' | 'eos') => {\n    const numAmount = parseFloat(amount) || 0;\n    if (fromCurrency === 'eth') {\n      return (numAmount * conversionRate).toFixed(2);\n    } else {\n      return (numAmount / conversionRate).toFixed(4);\n    }\n  };\n\n  // Handle ETH amount change\n  const handleEthAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setEthAmount(value);\n    const equivalentEos = calculateEquivalent(value, 'eth');\n    setEosAmount(equivalentEos);\n  };\n\n  // Handle EOS amount change\n  const handleEosAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setEosAmount(value);\n    const equivalentEth = calculateEquivalent(value, 'eos');\n    setEthAmount(equivalentEth);\n  };\n\n  // Wallet connection state\n  const [isConnected, setIsConnected] = useState(false);\n  const [ethAddress, setEthAddress] = useState('');\n  const [ethBalance, setEthBalance] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // EOS wallet state\n  const [eosAccountName, setEosAccountName] = useState('');\n  const [eosPrivateKey, setEosPrivateKey] = useState('');\n  const [isEosConnected, setIsEosConnected] = useState(false);\n  const [eosBalance, setEosBalance] = useState('');\n  const [showEosWalletForm, setShowEosWalletForm] = useState(false);\n  const [eosNetwork, setEosNetwork] = useState<'mainnet' | 'testnet'>('testnet');\n\n  // Blockchain integrations\n  const [blockchain] = useState(new BlockchainIntegration());\n  const [eosWallet] = useState(new EOSWalletIntegration());\n\n  // Auto-retrieve secret when swapId is available\n  useEffect(() => {\n    if (swapId && !revealedSecret) {\n      getStoredSecret();\n    }\n  }, [swapId]);\n\n  // Auto-check status and fetch HTLC data\n  useEffect(() => {\n    if (swapId) {\n      const interval = setInterval(async () => {\n        try {\n          const status = await blockchain.getRealIntentStatus(swapId);\n          if (status) {\n            if (status.executed && status.claimed) {\n              setSwapStatus('Claimed');\n            } else if (status.executed) {\n              setSwapStatus('Executed');\n            } else {\n              setSwapStatus('Pending');\n            }\n            \n            // Also refresh HTLC data for UI display\n            await fetchHTLCData(swapId);\n          }\n        } catch (error) {\n          console.log('Intent not found yet');\n        }\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [swapId, blockchain]);\n\n  // Auto-connect wallet\n  useEffect(() => {\n    const connectWallet = async () => {\n      try {\n        const result = await blockchain.connect();\n        if (result.success) {\n          setIsConnected(true);\n          setSwapStatus(`Connected to ${result.network} (${result.chainId})`);\n          fetchGasInfo(); // Fetch gas info when connected\n          // Auto-check resolver balance when connecting\n          await checkResolverBalance();\n        }\n      } catch (error) {\n        console.log('Wallet not connected');\n      }\n    };\n    connectWallet();\n  }, [blockchain]);\n\n  // Fetch gas info periodically\n  useEffect(() => {\n    if (isConnected) {\n      fetchGasInfo();\n      const interval = setInterval(fetchGasInfo, 30000); // Update every 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isConnected]);\n\n  const connectWallet = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const result = await blockchain.connect();\n      if (result.success) {\n        setIsConnected(true);\n        setSwapStatus(`Connected to ${result.network} (${result.chainId})`);\n        // Auto-check resolver balance when connecting\n        await checkResolverBalance();\n        await fetchGasInfo();\n      } else {\n        setError(result.error || 'Failed to connect wallet');\n      }\n    } catch (error) {\n      setError('Failed to connect wallet');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const connectEOSWallet = async () => {\n    if (!eosAccountName || !eosPrivateKey) {\n      setError('Please enter EOS account name and private key');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const config: EOSWalletConfig = {\n        accountName: eosAccountName,\n        privateKey: eosPrivateKey,\n        network: 'testnet' // Custom tab is for testnet only\n      };\n      \n      const success = await eosWallet.connect(config);\n      if (success) {\n        setIsEosConnected(true);\n        setShowEosWalletForm(false);\n        const balance = await eosWallet.getBalance();\n        setEosBalance(balance);\n        setSwapStatus(`Connected to EOS testnet`);\n      } else {\n        setError('Failed to connect EOS wallet');\n      }\n    } catch (error) {\n      setError('Failed to connect EOS wallet');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const disconnectEOSWallet = () => {\n    eosWallet.disconnect();\n    setIsEosConnected(false);\n    setEosBalance('');\n    setEosAccountName('');\n    setEosPrivateKey('');\n    setSwapStatus('EOS wallet disconnected');\n  };\n\n  const createIntent = async () => {\n    if (!isConnected || !ethAmount) {\n      setError('Please connect wallet and enter amount');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      console.log('🔍 Creating intent with amount:', ethAmount);\n      \n      const result = await blockchain.createRealIntent(ethAmount);\n      setSwapId(result.swapId);\n      setSwapStatus(result.message);\n      setHashlock(ethers.keccak256(ethers.randomBytes(32)));\n      setDeadline((Math.floor(Date.now() / 1000) + 3600).toString());\n      setEthTxHash(result.txHash || '');\n      setIntentAmount(ethAmount); // Store the amount used for intent creation\n\n      console.log('✅ Intent created successfully:', {\n        swapId: result.swapId,\n        storedIntentAmount: ethAmount\n      });\n\n      // Fetch HTLC data after creation\n      await fetchHTLCData(result.swapId);\n      // Check resolver balance after creating intent\n      await checkResolverBalance();\n\n    } catch (error) {\n      console.error('❌ Create intent error:', error);\n      setError('Failed to create intent');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const executeRealIntent = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      console.log('🔍 Executing intent with:', {\n        swapId,\n        intentAmount,\n        currentEthAmount: ethAmount\n      });\n      \n      // Fetch the actual amount from the contract to ensure we use the correct amount\n      const intentDetails = await blockchain.getIntentDetails(swapId);\n      const contractAmount = intentDetails.amountEth;\n      \n      console.log('📋 Using contract amount for execution:', contractAmount);\n      \n      const result = await blockchain.executeRealIntent(swapId, contractAmount); // Use contract amount\n      setSwapStatus(result.message);\n      setEthTxHash(result.txHash || '');\n      \n      // Update the stored intent amount to match the contract\n      setIntentAmount(contractAmount);\n      \n    } catch (error) {\n      console.error('❌ Execute intent error:', error);\n      setError('Failed to execute intent');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const manualExecuteIntent = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      console.log('🚀 Manual intent execution initiated');\n      \n      const result = await blockchain.manualExecuteIntent(swapId);\n      \n      if (result.success) {\n        setSwapStatus(result.message || 'Intent executed successfully');\n        setEthTxHash(result.txHash || '');\n        setSuccess('Intent manually executed successfully!');\n        \n        // Refresh HTLC data after execution\n        await fetchHTLCData(swapId);\n      } else {\n        setError(result.error || 'Manual execution failed');\n      }\n      \n    } catch (error) {\n      console.error('❌ Manual execute intent error:', error);\n      setError('Failed to manually execute intent');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateIntentAmount = async () => {\n    if (!swapId || !ethAmount) {\n      setError('No swap ID or amount found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      // Create a new intent with the updated amount\n      const result = await blockchain.createRealIntent(ethAmount); // Fix: pass ethAmount directly, not as object\n      setSwapId(result.swapId);\n      setIntentAmount(ethAmount); // Update the stored intent amount\n      setSwapStatus(`Intent updated with new amount: ${ethAmount} ETH`);\n      setEthTxHash(result.txHash || '');\n      \n      // Fetch HTLC data after creation\n      await fetchHTLCData(result.swapId);\n      // Check resolver balance after creating intent\n      await checkResolverBalance();\n    } catch (error) {\n      setError('Failed to update intent amount');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const performEOSTransfer = async () => {\n    if (!isEosConnected) {\n      setError('Please connect your EOS wallet first');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const result = await eosWallet.transferEOS('recipient123', `${eosAmount} EOS`, `Swap ${swapId.slice(0, 8)}`);\n      setSwapStatus(`EOS transfer completed: ${result.txHash}`);\n      setTxHash(result.txHash);\n      setEosTxHash(result.txHash);\n    } catch (error) {\n      setError('Failed to perform EOS transfer');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const revealSecret = async () => {\n    if (!secret) {\n      setError('Please enter the secret');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      // Generate hashlock from secret\n      const hashlock = ethers.keccak256(ethers.toUtf8Bytes(secret));\n      setHashlock(hashlock);\n      setRevealedSecret(secret);\n      setShowSecretForm(false);\n      setSwapStatus('Secret revealed - Ready to claim tokens');\n    } catch (error) {\n      setError('Failed to reveal secret');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const claimTokens = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      // Use empty string as secret parameter since blockchain.claimTokens will get the stored secret\n      const result = await blockchain.claimTokens(swapId, '');\n      setSwapStatus(result.message);\n      setTxHash(result.txHash || '');\n      // Refresh HTLC data after claiming\n      await fetchHTLCData(swapId);\n    } catch (error: any) {\n      setError('Failed to claim tokens: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refundHTLC = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const result = await blockchain.refundHTLC(swapId);\n      setSwapStatus(result.message);\n      setTxHash(result.txHash || '');\n      // Refresh HTLC data after refund\n      await fetchHTLCData(swapId);\n    } catch (error) {\n      setError('Failed to refund HTLC');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkStatus = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const status = await blockchain.getRealIntentStatus(swapId);\n      if (status) {\n        setSwapStatus(status.status);\n        setTxHash(status.txHash || '');\n        // Also fetch HTLC data when checking status\n        await fetchHTLCData(swapId);\n      } else {\n        console.log('Intent not found yet');\n      }\n    } catch (error) {\n      console.log('Status check failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getContracts = () => {\n    return blockchain.getContracts();\n  };\n\n  const fetchGasInfo = async () => {\n    if (isConnected) {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const feeData = await provider.getFeeData();\n        const gasPriceGwei = ethers.formatUnits(feeData.gasPrice || 0, 'gwei');\n        setGasPrice(`${parseFloat(gasPriceGwei).toFixed(1)} Gwei`);\n        \n        // Estimate gas cost for executeIntent function\n        const gasLimitEstimate = 200000; // Approximate gas limit for executeIntent\n        const gasCostWei = (feeData.gasPrice || BigInt(0)) * BigInt(gasLimitEstimate);\n        const gasCostEth = ethers.formatEther(gasCostWei);\n        setEstimatedGasCost(`~${parseFloat(gasCostEth).toFixed(4)} ETH`);\n        setGasLimit(`~${gasLimitEstimate.toLocaleString()}`);\n      } catch (error) {\n        console.log('Could not fetch gas info:', error);\n      }\n    }\n  };\n\n  const fetchHTLCData = async (swapId: string) => {\n    if (!isConnected || !swapId) return;\n    \n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a'; // New fundable contract\n      const abi = [\n        \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\"\n      ];\n      \n      const contract = new ethers.Contract(resolverAddress, abi, provider);\n      const intent = await contract.getIntent(swapId);\n      \n      if (intent && intent.user !== ethers.ZeroAddress) {\n        setHtlcData({\n          hashlock: intent.hashlock,\n          timelock: Number(intent.deadline),\n          orderHash: intent.orderHash,\n          beneficiary: intent.beneficiary,\n          amount: ethers.formatEther(intent.amount),\n          deadline: Number(intent.deadline),\n          escrowAddress: intent.escrowAddress,\n          executed: intent.executed,\n          claimed: intent.claimed,\n          refunded: false // Will be determined by checking if deadline passed and not claimed\n        });\n      }\n    } catch (error) {\n      console.log('Could not fetch HTLC data:', error);\n    }\n  };\n\n  const checkResolverBalance = async () => {\n    if (!isConnected) return;\n    \n    try {\n      const balance = await blockchain.getResolverBalance();\n      setResolverBalance(balance);\n    } catch (error) {\n      console.log('Could not check resolver balance:', error);\n    }\n  };\n\n  const getIntentDetails = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const details = await blockchain.getIntentDetails(swapId);\n      console.log('📋 Contract Intent Details:', details);\n      \n      // Show the details in the UI\n      setSwapStatus(`Intent Details: Amount=${details.amountEth} ETH, Executed=${details.executed}, Claimed=${details.claimed}`);\n      \n      // Update the stored intent amount to match what's in the contract\n      if (details.amountEth !== intentAmount) {\n        console.log('🔄 Updating stored intent amount to match contract:', details.amountEth);\n        setIntentAmount(details.amountEth);\n      }\n      \n    } catch (error) {\n      console.error('❌ Get intent details error:', error);\n      setError('Failed to get intent details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderContractInfo = () => {\n    const contracts = getContracts();\n    if (contracts.mode === 'mainnet') {\n  return (\n        <div className=\"space-y-1\">\n          <p><span className=\"font-mono\">Fusion Resolver:</span> {(contracts as any).LOP_V4}</p>\n          <p><span className=\"font-mono\">LOP V4:</span> {(contracts as any).LOP_V4}</p>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"space-y-1\">\n          <p><span className=\"font-mono\">Escrow Factory:</span> {(contracts as any).escrowFactory}</p>\n          <p><span className=\"font-mono\">Gasless Resolver:</span> {(contracts as any).gaslessResolver}</p>\n        </div>\n      );\n    }\n  };\n\n  const testContractConnection = async () => {\n    if (!isConnected) {\n      setError('Please connect wallet first');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      // Direct contract test without relying on blockchain integration\n      const { ethers } = await import('ethers');\n      const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a';\n      console.log('🧪 Testing contract connection directly...');\n      \n      const abi = [\n        \"function userNonces(address user) external view returns (uint256)\"\n      ];\n      \n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const resolver = new ethers.Contract(resolverAddress, abi, signer);\n      const testAddress = await signer.getAddress();\n      const nonce = await resolver.userNonces(testAddress);\n      \n      console.log('✅ Contract connection test successful:', {\n        address: resolverAddress,\n        testAddress,\n        nonce: nonce.toString()\n      });\n      \n      setSwapStatus(`Contract test successful: Nonce = ${nonce.toString()}`);\n    } catch (error: any) {\n      console.error('❌ Contract test failed:', error);\n      setError('Contract test failed: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testExecuteIntent = async () => {\n    if (!isConnected || !swapId) {\n      setError('Please connect wallet and create an intent first');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      // Direct executeIntent test\n      const { ethers } = await import('ethers');\n      const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a';\n      console.log('🧪 Testing executeIntent directly...');\n      \n      const abi = [\n        \"function executeIntent(bytes32 swapId) external payable\",\n        \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\"\n      ];\n      \n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const resolver = new ethers.Contract(resolverAddress, abi, signer);\n      \n      // Get intent details first\n      const intent = await resolver.getIntent(swapId);\n      const amount = intent.amount;\n      console.log('📋 Intent details:', {\n        amount: ethers.formatEther(amount),\n        executed: intent.executed,\n        claimed: intent.claimed\n      });\n      \n      if (intent.executed) {\n        setError('Intent already executed');\n        return;\n      }\n      \n      // Execute the intent\n      console.log('🎯 Executing intent with amount:', ethers.formatEther(amount));\n      const tx = await resolver.executeIntent(swapId, { \n        value: amount \n      });\n      console.log('📝 Transaction sent:', tx.hash);\n      \n      const receipt = await tx.wait();\n      console.log('✅ Transaction confirmed:', receipt.hash);\n      \n      setSwapStatus(`Intent executed successfully! TX: ${receipt.hash}`);\n      setEthTxHash(receipt.hash);\n      \n    } catch (error: any) {\n      console.error('❌ Execute intent test failed:', error);\n      setError('Execute intent test failed: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refreshIntentStatus = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const { ethers } = await import('ethers');\n      const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a';\n      \n      const abi = [\n        \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\"\n      ];\n      \n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const resolver = new ethers.Contract(resolverAddress, abi, signer);\n      \n      const intent = await resolver.getIntent(swapId);\n      \n      console.log('📋 Current intent status:', {\n        executed: intent.executed,\n        claimed: intent.claimed,\n        amount: ethers.formatEther(intent.amount),\n        escrowAddress: intent.escrowAddress\n      });\n      \n      // Update UI state based on intent status\n      if (intent.executed) {\n        setSwapStatus('Intent executed successfully! Ready for claiming.');\n        if (intent.claimed) {\n          setSwapStatus('Tokens claimed successfully!');\n        }\n      } else {\n        setSwapStatus('Intent created - Ready for execution');\n      }\n      \n      // Update stored intent amount\n      setIntentAmount(ethers.formatEther(intent.amount));\n      \n      // Update HTLC data for the UI display\n      await fetchHTLCData(swapId);\n      \n    } catch (error: any) {\n      console.error('❌ Failed to refresh intent status:', error);\n      setError('Failed to refresh status: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateSecret = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const { ethers } = await import('ethers');\n      \n      // Generate a random secret\n      const randomSecret = ethers.randomBytes(32);\n      const secretHex = ethers.hexlify(randomSecret);\n      \n      // Generate hashlock from secret\n      const hashlock = ethers.keccak256(randomSecret);\n      \n      console.log('🔐 Generated Secret:', {\n        secretHex,\n        hashlock\n      });\n      \n      // Store the secret (use hex format for display)\n      setSecret(secretHex);\n      setHashlock(hashlock);\n      setRevealedSecret(secretHex);\n      setShowSecretForm(false);\n      \n      setSwapStatus(`Secret generated! Hashlock: ${hashlock.slice(0, 10)}...`);\n      \n    } catch (error: any) {\n      console.error('❌ Failed to generate secret:', error);\n      setError('Failed to generate secret: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const verifySecret = async () => {\n    if (!swapId || !secret) {\n      setError('Please enter a secret to verify');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    try {\n      const { ethers } = await import('ethers');\n      const resolverAddress = '0xc75e75Fb1378079DBd6f38F0Ae688689Bd791B1a';\n      \n      const abi = [\n        \"function getIntent(bytes32 swapId) external view returns (tuple(address user, address beneficiary, uint256 amount, bytes32 orderHash, bytes32 hashlock, uint256 deadline, uint256 nonce, bool executed, bool claimed, address escrowAddress))\"\n      ];\n      \n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const resolver = new ethers.Contract(resolverAddress, abi, signer);\n      \n      // Get the hashlock from the contract\n      const intent = await resolver.getIntent(swapId);\n      const contractHashlock = intent.hashlock;\n      \n      // Generate hashlock from the provided secret (assuming it's hex)\n      const secretBytes = ethers.getBytes(secret);\n      const secretHashlock = ethers.keccak256(secretBytes);\n      \n      console.log('🔍 Secret Verification:', {\n        providedSecret: secret,\n        contractHashlock: contractHashlock,\n        secretHashlock: secretHashlock,\n        matches: contractHashlock === secretHashlock\n      });\n      \n      if (contractHashlock === secretHashlock) {\n        setHashlock(secretHashlock);\n        setRevealedSecret(secret);\n        setShowSecretForm(false);\n        setSwapStatus('✅ Secret verified! Ready to claim tokens.');\n      } else {\n        setError('❌ Secret does not match the hashlock. Please check your secret.');\n      }\n      \n    } catch (error: any) {\n      console.error('❌ Failed to verify secret:', error);\n      setError('Failed to verify secret: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStoredSecret = async () => {\n    if (!swapId) {\n      setError('No swap ID found');\n      return;\n    }\n\n    try {\n      const storedSecretHex = localStorage.getItem(`secret_${swapId}`);\n      if (!storedSecretHex) {\n        setError('No secret found for this swap. Please check if the intent was created properly.');\n        return;\n      }\n\n      // Convert hex to readable format\n      const { ethers } = await import('ethers');\n      const secretBytes = ethers.getBytes(storedSecretHex);\n      const hashlock = ethers.keccak256(secretBytes);\n\n      console.log('🔐 Retrieved stored secret:', {\n        swapId,\n        secretHex: storedSecretHex,\n        hashlock\n      });\n\n      setSecret(storedSecretHex);\n      setHashlock(hashlock);\n      setRevealedSecret(storedSecretHex);\n      setShowSecretForm(false);\n      setSwapStatus('✅ Stored secret retrieved! Ready to claim tokens.');\n\n    } catch (error: any) {\n      console.error('❌ Failed to retrieve stored secret:', error);\n      setError('Failed to retrieve stored secret: ' + error.message);\n    }\n  };\n\n  const copySecretToClipboard = async () => {\n    if (!revealedSecret) {\n      setError('No secret to copy');\n      return;\n    }\n    \n    try {\n      await navigator.clipboard.writeText(revealedSecret);\n      setSwapStatus('Secret copied to clipboard!');\n    } catch (error) {\n      setError('Failed to copy secret to clipboard');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">\n            🏭 Fusion Cross-Chain Bridge\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Gasless Cross-Chain Atomic Swaps with 1inch Fusion+\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"custom\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"custom\">Custom (EOS↔ETH)</TabsTrigger>\n            <TabsTrigger value=\"mainnet\">Mainnet Swaps</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"custom\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>🔄 Bidirectional Gasless Swap (Custom)</CardTitle>\n                <CardDescription>\n                  Cross-chain atomic swaps using real deployed 1inch-compatible contracts (Sepolia Testnet) - Resolver pays gas fees\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Swap Direction Selection */}\n                <div className=\"space-y-2\">\n                  <Label>Swap Direction</Label>\n                  <div className=\"flex space-x-4\">\n                    <Button\n                      variant={swapDirection === 'eth-to-eos' ? 'default' : 'outline'}\n                      onClick={() => setSwapDirection('eth-to-eos')}\n                    >\n                      ETH → EOS\n                    </Button>\n                    <Button\n                      variant={swapDirection === 'eos-to-eth' ? 'default' : 'outline'}\n                      onClick={() => setSwapDirection('eos-to-eth')}\n                    >\n                      EOS → ETH\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Conversion Rate Display */}\n                <div className=\"space-y-4\">\n                  <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200\">\n                    <div className=\"text-sm text-blue-800\">\n                      <strong>💱 Conversion Rate:</strong> 1 ETH = {conversionRate.toLocaleString()} EOS\n                    </div>\n                  </div>\n\n                  {/* Gasless Indicator */}\n                  <div className=\"bg-green-50 p-3 rounded-lg border border-green-200\">\n                    <div className=\"text-sm text-green-800\">\n                      <strong>💸 REAL GASLESS TRANSACTIONS:</strong> Using deployed contracts - Resolver pays gas fees\n                    </div>\n                  </div>\n                </div>\n\n                {/* Amount Inputs */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ethAmount\">ETH Amount</Label>\n                    <Input\n                      id=\"ethAmount\"\n                      type=\"number\"\n                      step=\"0.001\"\n                      value={ethAmount}\n                      onChange={handleEthAmountChange}\n                      placeholder=\"0.01\"\n                    />\n                    {intentAmount && intentAmount !== ethAmount && (\n                      <div className=\"text-sm text-orange-600 bg-orange-50 p-2 rounded border border-orange-200\">\n                        ⚠️ Intent was created with {intentAmount} ETH. Use \"Execute Intent\" to proceed with the stored amount.\n                        <Button \n                          onClick={updateIntentAmount} \n                          variant=\"outline\" \n                          size=\"sm\" \n                          className=\"mt-2 w-full text-orange-700 border-orange-300\"\n                        >\n                          🔄 Update Intent Amount\n                        </Button>\n        </div>\n                    )}\n                    \n                    {/* Debug Info */}\n                    {swapId && (\n                      <div className=\"text-xs text-gray-500 bg-gray-50 p-2 rounded border\">\n                        <div className=\"font-semibold\">🔍 Debug Info:</div>\n                        <div>Current Input: {ethAmount} ETH</div>\n                        <div>Stored Intent: {intentAmount} ETH</div>\n                        <div>Swap ID: {swapId.slice(0, 8)}...</div>\n                        <div className=\"flex gap-2 mt-2\">\n                          <Button \n                            onClick={getIntentDetails} \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            📋 Get Details\n                          </Button>\n                          <Button \n                            onClick={() => {\n                              getIntentDetails();\n                              setError('');\n                            }} \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            🔄 Sync Amount\n                          </Button>\n                          <Button \n                            onClick={testContractConnection} \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            🧪 Test Contract\n                          </Button>\n                          <Button \n                            onClick={testExecuteIntent} \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            🎯 Test Execute\n                          </Button>\n                          <Button \n                            onClick={refreshIntentStatus} \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            🔄 Refresh Status\n                          </Button>\n                          <Button \n                            onClick={generateSecret} \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            🔐 Generate Secret\n                          </Button>\n                          <Button \n                            onClick={verifySecret} \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            🔍 Verify Secret\n                          </Button>\n                          <Button \n                            onClick={getStoredSecret} \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-xs\"\n                          >\n                            📋 Get Stored Secret\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                    <p className=\"text-sm text-gray-500\">\n                      Equivalent: {calculateEquivalent(ethAmount, 'eth')} EOS\n                    </p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>EOS Amount</Label>\n                    <Input\n                      type=\"number\"\n                      value={eosAmount}\n                      onChange={handleEosAmountChange}\n                      placeholder=\"35.0\"\n                    />\n                    {eosAmount && (\n                      <div className=\"text-xs text-gray-500\">\n                        ≈ {calculateEquivalent(eosAmount, 'eos')} ETH\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Wallet Connections */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  {/* ETH Wallet */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">🏭 Ethereum Wallet (Sepolia)</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {!isConnected ? (\n                        <Button onClick={connectWallet} disabled={loading} className=\"w-full\">\n                          {loading ? 'Connecting...' : 'Connect MetaMask'}\n                        </Button>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-gray-600\">Connected to Sepolia</p>\n                          <p className=\"text-sm\">Ready for testnet swaps</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* EOS Wallet */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">🌴 EOS Wallet (Jungle Testnet)</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {!isEosConnected ? (\n                        <div className=\"space-y-2\">\n                          <Button \n                            onClick={() => setShowEosWalletForm(!showEosWalletForm)} \n                            variant=\"outline\" \n                            className=\"w-full\"\n                          >\n                            Connect EOS Wallet\n                          </Button>\n                          {showEosWalletForm && (\n                            <div className=\"space-y-2 pt-2\">\n                              <Input\n                                placeholder=\"EOS Account Name\"\n                                value={eosAccountName}\n                                onChange={(e) => setEosAccountName(e.target.value)}\n                              />\n                              <Input\n                                type=\"password\"\n                                placeholder=\"Private Key\"\n                                value={eosPrivateKey}\n                                onChange={(e) => setEosPrivateKey(e.target.value)}\n                              />\n                              <Button onClick={connectEOSWallet} disabled={loading} className=\"w-full\">\n                                {loading ? 'Connecting...' : 'Connect to Jungle Testnet'}\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-gray-600\">Connected to Jungle Testnet</p>\n                          <p className=\"text-xs font-mono\">{eosAccountName}</p>\n                          <p className=\"text-sm\">Balance: {eosBalance}</p>\n                          <Button onClick={disconnectEOSWallet} variant=\"outline\" size=\"sm\">\n                            Disconnect\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Swap Actions */}\n                <div className=\"space-y-4\">\n                  <Button onClick={createIntent} disabled={!isConnected || loading} className=\"w-full\">\n                    {loading ? 'Creating...' : 'Create Gasless Intent (0 Gas Cost)'}\n                  </Button>\n                  \n                  {swapId && (\n                    <Button onClick={executeRealIntent} disabled={loading} className=\"w-full\">\n                      {loading ? 'Executing...' : 'Execute Intent (Resolver Pays Gas)'}\n                    </Button>\n                  )}\n\n                  {isEosConnected && (\n                    <Button onClick={performEOSTransfer} disabled={loading} className=\"w-full\">\n                      {loading ? 'Transferring...' : 'Perform EOS Transfer'}\n                    </Button>\n                  )}\n\n                  {/* Secret Reveal Section */}\n                  {swapStatus === 'Executed' && !revealedSecret && (\n                    <div className=\"border-2 border-orange-200 rounded-lg p-4 bg-orange-50\">\n                      <div className=\"text-center mb-3\">\n                        <div className=\"text-orange-800 font-semibold mb-1\">🔐 Ready to Reveal Secret</div>\n                        <div className=\"text-orange-600 text-sm\">Complete the swap by revealing your secret</div>\n                      </div>\n                      <Button \n                        onClick={() => setShowSecretForm(!showSecretForm)} \n                        variant=\"outline\" \n                        className=\"w-full border-orange-300 text-orange-700 hover:bg-orange-100\"\n                      >\n                        {showSecretForm ? 'Hide Secret Form' : '🔓 Reveal Secret & Claim'}\n                      </Button>\n                    </div>\n                  )}\n\n                  {showSecretForm && (\n                    <div className=\"space-y-3 p-4 border-2 border-blue-200 rounded-lg bg-blue-50\">\n                      <div className=\"text-center\">\n                        <div className=\"text-blue-800 font-semibold mb-1\">🔐 Enter Your Secret</div>\n                        <div className=\"text-blue-600 text-sm\">This will generate the hashlock for claiming</div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-blue-800\">Secret:</Label>\n                        <Input\n                          type=\"password\"\n                          value={secret}\n                          onChange={(e) => setSecret(e.target.value)}\n                          placeholder=\"Enter secret to reveal hashlock\"\n                          className=\"border-blue-300 focus:border-blue-500\"\n                        />\n                      </div>\n                      <Button \n                        onClick={revealSecret} \n                        disabled={loading || !secret} \n                        className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                      >\n                        {loading ? 'Revealing...' : '🔓 Reveal Secret'}\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Claim Section */}\n                  {revealedSecret && (\n                    <div className=\"border-2 border-green-200 rounded-lg p-4 bg-green-50\">\n                      <div className=\"text-center mb-3\">\n                        <div className=\"text-green-800 font-semibold mb-1\">🎯 Ready to Claim Tokens</div>\n                        <div className=\"text-green-600 text-sm\">Secret revealed - Claim your tokens gaslessly</div>\n                      </div>\n                      <Button \n                        onClick={claimTokens} \n                        disabled={loading} \n                        className=\"w-full bg-green-600 hover:bg-green-700\"\n                      >\n                        {loading ? 'Claiming...' : '🎯 Claim Tokens (Gasless)'}\n                      </Button>\n                    </div>\n                  )}\n\n                  <Button onClick={checkStatus} disabled={!swapId || loading} variant=\"outline\" className=\"w-full\">\n                    {loading ? 'Checking...' : 'Check Status'}\n                  </Button>\n                </div>\n\n                {/* Status Display */}\n                {swapStatus && (\n                  <Alert>\n                    <AlertDescription>{swapStatus}</AlertDescription>\n                  </Alert>\n                )}\n\n                {error && (\n                  <Alert className=\"border-red-200 bg-red-50\">\n                    <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                {/* Swap Details */}\n                {swapId && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Swap Details</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Swap ID:</span>\n                        <span className=\"font-mono\">{swapId}</span>\n                      </div>\n                      {hashlock && (\n                        <div className=\"flex justify-between\">\n                          <span>Hashlock:</span>\n                          <span className=\"font-mono\">{hashlock}</span>\n                        </div>\n                      )}\n                      {deadline && (\n                        <div className=\"flex justify-between\">\n                          <span>Deadline:</span>\n                          <span>{new Date(parseInt(deadline) * 1000).toLocaleString()}</span>\n                        </div>\n                      )}\n                      {txHash && (\n                        <div className=\"flex justify-between\">\n                          <span>Transaction:</span>\n                          <span className=\"font-mono\">{txHash}</span>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Transfer Blocks */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm\">🔄 Transfer Blocks</CardTitle>\n                    <CardDescription>\n                      Real-time blockchain transaction details and transfer history\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* ETH Transfer Block */}\n                    <div className=\"border rounded-lg p-4 bg-blue-50\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold text-blue-900\">🏭 Ethereum Transfer</h4>\n                        <Badge variant=\"outline\" className=\"text-blue-700\">Sepolia Testnet</Badge>\n                      </div>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">From:</span>\n                          <span className=\"font-mono text-blue-800\">\n                            {isConnected ? '0xeb63...1f90' : 'Not Connected'}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">To:</span>\n                          <span className=\"font-mono text-blue-800\">0x9F5c...b20f</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Amount:</span>\n                          <span className=\"font-semibold text-blue-900\">{ethAmount} ETH</span>\n                        </div>\n                        \n                        {/* Gas Information */}\n                        <div className=\"border-t pt-2 mt-2\">\n                          <div className=\"text-xs font-semibold text-blue-800 mb-2\">⛽ Gas Details</div>\n                          <div className=\"space-y-1\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Gas Price:</span>\n                              <span className=\"font-mono text-blue-800\">~{gasPrice}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Gas Limit:</span>\n                              <span className=\"font-mono text-blue-800\">~{gasLimit}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Estimated Gas Cost:</span>\n                              <span className=\"font-mono text-blue-800\">~{estimatedGasCost}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Gas Paid By:</span>\n                              <span className=\"text-green-600 font-semibold\">Resolver (Gasless)</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {ethTxHash && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Tx Hash:</span>\n                            <span className=\"font-mono text-xs text-blue-800 break-all\">\n                              {ethTxHash}\n                            </span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Status:</span>\n                          <Badge variant={swapStatus === 'Executed' ? 'default' : 'secondary'}>\n                            {swapStatus || 'Pending'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* EOS Transfer Block */}\n                    <div className=\"border rounded-lg p-4 bg-green-50\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold text-green-900\">🌴 EOS Transfer</h4>\n                        <Badge variant=\"outline\" className=\"text-green-700\">Jungle Testnet</Badge>\n                      </div>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">From:</span>\n                          <span className=\"font-mono text-green-800\">\n                            {isEosConnected ? eosAccountName : 'Not Connected'}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">To:</span>\n                          <span className=\"font-mono text-green-800\">silaslist123</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Amount:</span>\n                          <span className=\"font-semibold text-green-900\">{eosAmount} EOS</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Memo:</span>\n                          <span className=\"font-mono text-green-800\">\n                            {swapId ? `Swap ${swapId.slice(0, 8)}` : 'Pending'}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Status:</span>\n                          <Badge variant={isEosConnected ? 'default' : 'secondary'}>\n                            {isEosConnected ? 'Ready' : 'Not Connected'}\n                          </Badge>\n                        </div>\n                        {eosTxHash && (\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Tx Hash:</span>\n                            <span className=\"font-mono text-xs text-green-800 break-all\">\n                              {eosTxHash}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Cross-Chain Bridge Info */}\n                    <div className=\"border rounded-lg p-4 bg-purple-50\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold text-purple-900\">🌉 Cross-Chain Bridge</h4>\n                        <Badge variant=\"outline\" className=\"text-purple-700\">1inch Fusion+</Badge>\n                      </div>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Direction:</span>\n                          <span className=\"font-semibold text-purple-900\">\n                            {swapDirection === 'eth-to-eos' ? 'ETH → EOS' : 'EOS → ETH'}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Exchange Rate:</span>\n                          <span className=\"font-semibold text-purple-900\">\n                            1 ETH = {conversionRate.toLocaleString()} EOS\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Gasless:</span>\n                          <span className=\"text-green-600 font-semibold\">✅ Yes</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">HTLC:</span>\n                          <span className=\"text-green-600 font-semibold\">✅ Active</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Secret Management */}\n                    {(swapId || revealedSecret) && (\n                      <div className=\"border rounded-lg p-4 bg-orange-50\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-semibold text-orange-900\">🔐 Secret Management</h4>\n                          <Badge variant=\"outline\" className=\"text-orange-700\">HTLC Security</Badge>\n                        </div>\n                        <div className=\"space-y-2 text-sm\">\n                          {swapId && (\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Swap ID:</span>\n                              <span className=\"font-mono text-orange-800 text-xs break-all\">\n                                {swapId}\n                              </span>\n                            </div>\n                          )}\n                          {hashlock && (\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Hashlock:</span>\n                              <span className=\"font-mono text-orange-800 text-xs break-all\">\n                                {hashlock}\n                              </span>\n                            </div>\n                          )}\n                          {revealedSecret && (\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Secret:</span>\n                              <span className=\"font-mono text-orange-800 text-xs break-all\">\n                                {revealedSecret}\n                              </span>\n                            </div>\n                          )}\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Status:</span>\n                            <Badge variant={revealedSecret ? 'default' : 'secondary'}>\n                              {revealedSecret ? 'Secret Revealed' : 'Secret Pending'}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Comprehensive HTLC Management */}\n                    {htlcData && (\n                      <div className=\"border rounded-lg p-4 bg-indigo-50\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"font-semibold text-indigo-900\">🔗 HTLC Contract Details</h4>\n                          <Badge variant=\"outline\" className=\"text-indigo-700\">Real Contract Data</Badge>\n                        </div>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                          {/* Left Column */}\n                          <div className=\"space-y-3\">\n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">🔐 Hashlock</div>\n                              <div className=\"text-gray-700 text-xs font-mono break-all\">\n                                {htlcData.hashlock}\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                A bytes32 hash of a secret; ensures funds can only be claimed with a matching preimage\n                              </div>\n                            </div>\n                            \n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">⏰ Timelock</div>\n                              <div className=\"text-gray-700\">\n                                {new Date(htlcData.timelock * 1000).toLocaleString()}\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                A deadline after which the funds can be refunded to the original sender\n                              </div>\n                            </div>\n                            \n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">🧾 Order Hash</div>\n                              <div className=\"text-gray-700 text-xs font-mono break-all\">\n                                {htlcData.orderHash}\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                A unique identifier for each swap order (used to link swaps between chains)\n                              </div>\n                            </div>\n                            \n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">🏷️ Beneficiary</div>\n                              <div className=\"text-gray-700 text-xs font-mono break-all\">\n                                {htlcData.beneficiary}\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                The address who will receive the funds upon revealing the correct secret\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Right Column */}\n                          <div className=\"space-y-3\">\n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">💰 Amount</div>\n                              <div className=\"text-gray-700 font-semibold\">\n                                {htlcData.amount} ETH\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                The token or native asset amount being locked in the escrow\n                              </div>\n                            </div>\n                            \n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">🗓️ Deadline</div>\n                              <div className=\"text-gray-700\">\n                                {new Date(htlcData.deadline * 1000).toLocaleString()}\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                Expiry time in Unix timestamp format for automatic refund logic\n                              </div>\n                            </div>\n                            \n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">🏦 Escrow Address</div>\n                              <div className=\"text-gray-700 text-xs font-mono break-all\">\n                                {htlcData.escrowAddress || 'Not deployed yet'}\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                The deployed escrow contract address holding the locked funds\n                              </div>\n                            </div>\n                            \n                            <div className=\"bg-white p-3 rounded border\">\n                              <div className=\"font-semibold text-indigo-800 mb-2\">🧠 Escrow State</div>\n                              <div className=\"space-y-1\">\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Executed:</span>\n                                  <Badge variant={htlcData.executed ? 'default' : 'secondary'}>\n                                    {htlcData.executed ? 'Yes' : 'No'}\n                                  </Badge>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Claimed:</span>\n                                  <Badge variant={htlcData.claimed ? 'default' : 'secondary'}>\n                                    {htlcData.claimed ? 'Yes' : 'No'}\n                                  </Badge>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span className=\"text-gray-600\">Expired:</span>\n                                  <Badge variant={Date.now() > htlcData.deadline * 1000 ? 'destructive' : 'secondary'}>\n                                    {Date.now() > htlcData.deadline * 1000 ? 'Yes' : 'No'}\n                                  </Badge>\n                                </div>\n                              </div>\n                              <div className=\"text-gray-500 text-xs mt-1\">\n                                Whether the escrow is resolved, claimed, or refunded to prevent double claims\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {/* HTLC Actions */}\n                        <div className=\"mt-4 pt-4 border-t border-indigo-200\">\n                          <div className=\"flex flex-wrap gap-2\">\n                            <Button \n                              onClick={() => fetchHTLCData(swapId)} \n                              variant=\"outline\" \n                              size=\"sm\"\n                              className=\"text-indigo-700 border-indigo-300\"\n                            >\n                              🔄 Refresh HTLC Data\n                            </Button>\n                            \n                            <Button \n                              onClick={getIntentDetails} \n                              variant=\"outline\" \n                              size=\"sm\"\n                              className=\"text-blue-700 border-blue-300\"\n                            >\n                              📋 Get Intent Details\n                            </Button>\n                            \n                            {htlcData.executed && !htlcData.claimed && Date.now() > htlcData.deadline * 1000 && (\n                              <Button \n                                onClick={refundHTLC} \n                                variant=\"destructive\" \n                                size=\"sm\"\n                              >\n                                🔄 Refund Expired HTLC\n                              </Button>\n                            )}\n                            \n                            {htlcData.executed && !htlcData.claimed && Date.now() <= htlcData.deadline * 1000 && (\n                              <Button \n                                onClick={() => setShowSecretForm(true)} \n                                variant=\"default\" \n                                size=\"sm\"\n                                className=\"bg-green-600 hover:bg-green-700\"\n                              >\n                                🔓 Claim with Secret\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Gasless Mechanism Explanation */}\n                    <div className=\"border rounded-lg p-4 bg-yellow-50\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"font-semibold text-yellow-900\">💸 Gasless Mechanism</h4>\n                        <Badge variant=\"outline\" className=\"text-yellow-700\">How It Works</Badge>\n                      </div>\n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"bg-white p-3 rounded border\">\n                          <div className=\"font-semibold text-yellow-800 mb-2\">🔐 Step 1: Intent Creation (0 Gas)</div>\n                          <div className=\"text-gray-700 space-y-1\">\n                            <div>• User signs EIP-712 intent off-chain</div>\n                            <div>• No blockchain transaction required</div>\n                            <div>• Intent stored in resolver contract</div>\n                            <div>• <span className=\"font-semibold text-green-600\">User pays: 0 gas</span></div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-white p-3 rounded border\">\n                          <div className=\"font-semibold text-yellow-800 mb-2\">⚡ Step 2: Intent Execution (Resolver Pays Gas)</div>\n                          <div className=\"text-gray-700 space-y-1\">\n                            <div>• Resolver calls executeIntent() function</div>\n                            <div>• Resolver pays {estimatedGasCost} in gas fees</div>\n                            <div>• Creates escrow contract with user's ETH</div>\n                            <div>• <span className=\"font-semibold text-green-600\">User pays: 0 gas</span></div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-white p-3 rounded border\">\n                          <div className=\"font-semibold text-yellow-800 mb-2\">🎯 Step 3: Token Claim (0 Gas)</div>\n                          <div className=\"text-gray-700 space-y-1\">\n                            <div>• User reveals secret to claim tokens</div>\n                            <div>• Resolver handles claim transaction</div>\n                            <div>• Resolver pays gas for claim</div>\n                            <div>• <span className=\"font-semibold text-green-600\">User pays: 0 gas</span></div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-blue-100 p-3 rounded border\">\n                          <div className=\"font-semibold text-blue-800 mb-1\">💰 Total User Cost:</div>\n                          <div className=\"text-blue-700\">\n                            <span className=\"font-bold text-lg\">0 ETH gas fees</span> + <span className=\"font-bold\">{ethAmount} ETH swap amount</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"bg-green-100 p-3 rounded border\">\n                          <div className=\"font-semibold text-green-800 mb-1\">💚 Gas Savings:</div>\n                          <div className=\"text-green-700\">\n                            <div>• User saves: <span className=\"font-bold\">{estimatedGasCost}</span></div>\n                            <div>• Resolver pays: <span className=\"font-bold\">{estimatedGasCost}</span></div>\n                            <div>• Gasless benefit: <span className=\"font-bold text-lg\">100% gas savings</span></div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Transaction Timeline */}\n                    <div className=\"border rounded-lg p-4 bg-gray-50\">\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">📅 Transaction Timeline</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium\">ETH Wallet Connected</div>\n                            <div className=\"text-xs text-gray-500\">Sepolia Testnet</div>\n                          </div>\n                          <Badge variant={isConnected ? 'default' : 'secondary'}>\n                            {isConnected ? 'Connected' : 'Disconnected'}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${isEosConnected ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium\">EOS Wallet Connected</div>\n                            <div className=\"text-xs text-gray-500\">Jungle Testnet</div>\n                          </div>\n                          <Badge variant={isEosConnected ? 'default' : 'secondary'}>\n                            {isEosConnected ? 'Connected' : 'Disconnected'}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${swapId ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium\">Intent Created</div>\n                            <div className=\"text-xs text-gray-500\">Gasless signature</div>\n                          </div>\n                          <Badge variant={swapId ? 'default' : 'secondary'}>\n                            {swapId ? 'Created' : 'Pending'}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${swapStatus === 'Executed' ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium\">Intent Executed</div>\n                            <div className=\"text-xs text-gray-500\">Resolver pays gas</div>\n                          </div>\n                          <Badge variant={swapStatus === 'Executed' ? 'default' : 'secondary'}>\n                            {swapStatus === 'Executed' ? 'Executed' : 'Pending'}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${swapStatus === 'Claimed' ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium\">Tokens Claimed</div>\n                            <div className=\"text-xs text-gray-500\">Secret revealed</div>\n                          </div>\n                          <Badge variant={swapStatus === 'Claimed' ? 'default' : 'secondary'}>\n                            {swapStatus === 'Claimed' ? 'Claimed' : 'Pending'}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${revealedSecret ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium\">Secret Revealed</div>\n                            <div className=\"text-xs text-gray-500\">Hashlock generated</div>\n                          </div>\n                          <Badge variant={revealedSecret ? 'default' : 'secondary'}>\n                            {revealedSecret ? 'Revealed' : 'Pending'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"mainnet\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>🏭 Mainnet Bidirectional Swaps</CardTitle>\n                <CardDescription>\n                  Production-ready gasless mainnet swaps (ETH ↔ EOS)\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">ETH → EOS Mainnet</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-4\">\n                        Gasless ETH to EOS swap on mainnet\n                      </p>\n                      <Button \n                        onClick={() => window.open('https://github.com/your-repo#eth-to-eos-mainnet', '_blank')}\n                        className=\"w-full\"\n                      >\n                        Run ETH→EOS\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">EOS → ETH Mainnet</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-gray-600 mb-4\">\n                        Gasless EOS to ETH swap on mainnet\n                      </p>\n                      <Button \n                        onClick={() => window.open('https://github.com/your-repo#eos-to-eth-mainnet', '_blank')}\n                        className=\"w-full\"\n                      >\n                        Run EOS→ETH\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Alert>\n                  <AlertDescription>\n                    <strong>Mainnet Configuration Required:</strong><br />\n                    1. Copy <code>mainnet-config.example</code> to <code>.env</code><br />\n                    2. Add your mainnet private keys and RPC URLs<br />\n                    3. Run: <code>npm run eth-to-eos-mainnet</code> or <code>npm run eos-to-eth-mainnet</code>\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Contract Information */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">📋 Contract Information</CardTitle>\n            <CardDescription>\n              {renderContractInfo()}\n            </CardDescription>\n          </CardHeader>\n        </Card>\n\n        {/* Resolver Balance Check */}\n                {/* Resolver Balance Section */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>💰 Resolver Funding Status</CardTitle>\n                    <CardDescription>\n                      The resolver needs ETH to pay for gas fees in gasless transactions\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {resolverBalance ? (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-mono text-sm\">Resolver Address:</span>\n                          <span className=\"font-mono text-xs\">{resolverBalance.address}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span>Balance:</span>\n                          <span className=\"font-bold\">{resolverBalance.balance} ETH</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span>Status:</span>\n                          <Badge variant={resolverBalance.isFunded ? \"default\" : \"destructive\"}>\n                            {resolverBalance.isFunded ? \"✅ Funded\" : \"❌ Not Funded\"}\n                          </Badge>\n                        </div>\n                        \n                        {!resolverBalance.isFunded && (\n                          <Alert>\n                            <AlertDescription>\n                              <strong>To fund the resolver:</strong>\n                              <br />\n                              1. Send ETH to: <code className=\"text-xs\">{resolverBalance.address}</code>\n                              <br />\n                              2. Network: Sepolia Testnet\n                              <br />\n                              3. Recommended: 0.1 ETH\n                              <br />\n                              <br />\n                              <strong>Free Sepolia ETH:</strong>\n                              <br />\n                              • <a href=\"https://sepoliafaucet.com/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 underline\">Sepolia Faucet</a>\n                              <br />\n                              • <a href=\"https://www.infura.io/faucet/sepolia\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 underline\">Infura Faucet</a>\n                            </AlertDescription>\n                          </Alert>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"text-center text-gray-500\">\n                        Connect wallet to check resolver balance\n                      </div>\n                    )}\n                    \n                    <Button \n                      onClick={checkResolverBalance} \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      disabled={!isConnected}\n                    >\n                      🔄 Check Resolver Balance\n                    </Button>\n                  </CardContent>\n                </Card>\n        {/* Secret Management Section */}\n        {swapId && (\n          <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              🔐 Secret Management\n            </h3>\n            \n            {/* Status Indicator */}\n            <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded\">\n              <p className=\"text-sm text-blue-800\">\n                {revealedSecret \n                  ? '✅ Secret is available and ready for claiming!' \n                  : '⏳ No secret available. Click \"Get Stored Secret\" to retrieve your secret.'\n                }\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Current Secret\n                </label>\n                <div className=\"bg-gray-50 p-3 rounded border font-mono text-sm break-all\">\n                  {revealedSecret || 'No secret revealed yet'}\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Hashlock\n                </label>\n                <div className=\"bg-gray-50 p-3 rounded border font-mono text-sm break-all\">\n                  {hashlock || 'No hashlock available'}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Button \n                onClick={getStoredSecret} \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"text-xs\"\n              >\n                📋 Get Stored Secret\n              </Button>\n              <Button \n                onClick={generateSecret} \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"text-xs\"\n              >\n                🔐 Generate New Secret\n              </Button>\n              <Button \n                onClick={verifySecret} \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"text-xs\"\n              >\n                🔍 Verify Secret\n              </Button>\n              {revealedSecret && (\n                <Button \n                  onClick={claimTokens} \n                  variant=\"default\" \n                  size=\"sm\"\n                  className=\"text-xs bg-green-600 hover:bg-green-700\"\n                >\n                  💰 Claim Tokens\n                </Button>\n              )}\n              {revealedSecret && (\n                <Button \n                  onClick={copySecretToClipboard} \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"text-xs\"\n                >\n                  📋 Copy Secret\n                </Button>\n              )}\n            </div>\n            \n            {/* Manual Secret Input */}\n            <div className=\"mt-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Manual Secret Input (if you have a secret)\n              </label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter your secret (hex format)\"\n                  value={secret}\n                  onChange={(e) => setSecret(e.target.value)}\n                  className=\"flex-1\"\n                />\n                <Button \n                  onClick={verifySecret} \n                  variant=\"outline\" \n                  size=\"sm\"\n                  disabled={!secret}\n                >\n                  Verify\n                </Button>\n              </div>\n            </div>\n            \n            {revealedSecret && (\n              <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded\">\n                <p className=\"text-sm text-green-800\">\n                  ✅ Secret is ready! You can now claim your tokens.\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}